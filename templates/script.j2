#!/bin/sh
# {{ ansible_managed }}
PATH="/usr/sbin:/usr/bin:/sbin:/bin"
LOGNAME=$(basename $0 .sh)
STATEFILE=/var/run/${LOGNAME}.state
LOCKFILE=/var/run/${LOGNAME}.lock
LOCKTIME={{ connectionchecker_locktime }}
MAXFILE={{ connectionchecker_failcount }}
EPOCHTIME=$(date +%s)

if [ -f $STATEFILE ] ; then
    COUNT=$(cat $STATEFILE)
    LASTRUNTIME=$(date +%s -r $STATEFILE)
else
    COUNT=1
    LASTRUNTIME=$EPOCHTIME
fi

testcmd()
{
    if ! wget -q {{ connectionchecker_url_target }} -O /dev/null ; then
        export URL_FAIL=1
        export EXIT=1
        logger -t $LOGNAME URL connection to {{ connectionchecker_url_target }} failed
        break
    elif ! ping -c 2 {{ connectionchecker_ping_target }} -q 2>&1 > /dev/null ; then
        export PING_FAIL=1
        export EXIT=1
        logger -t $LOGNAME ICMP failed to {{ connectionchecker_ping_target }}
        break
    else
        export URL_FAIL=0
        export PING_FAIL=0
        export EXIT=0
    fi
}

resetcmd()
{
    ifdown {{ connectionchecker_interface }}
    sleep 10s
    ifup {{ connectionchecker_interface }}
    sleep 10s
    {{ connectionchecker_service_restart_command }}
}

case $1 in
    failtest)
        echo testing reset process
        resetcmd
        ;;
esac

if [ -f $LOCKFILE ] ; then
    if [ $EPOCHTIME -gt $(($LASTRUNTIME-$LOCKTIME)) ] ; then
        logger -t $LOGNAME Lock file over $LOCKTIME seconds old, assuming something has broken calling reset command
        COUNT=0
        resetcmd
        EXIT=$?
    else
        logger -t $LOGNAME I already appear to be running, remove $LOCKFILE if this is wrong
        exit 1
    fi
fi

# Touch the LOCKFILE
touch $LOCKFILE

# Test the connection
testcmd

if [ $EXIT -gt 0 ] ; then
    COUNT=$((COUNT+1))
    logger -t $LOGNAME present failure COUNT is $COUNT
else
    COUNT=0
fi

if [ $COUNT -ge $MAXFILE ] ; then
    COUNT=0
    logger -t $LOGNAME Check failed $MAXFILE times, reseting connection
    resetcmd
fi

echo $COUNT > $STATEFILE
rm -f $LOCKFILE
exit $EXIT
